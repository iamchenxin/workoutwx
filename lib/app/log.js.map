{"version":3,"sources":["app/log.js"],"names":["ctx","next","query","l","logStr","fs","readFile","e","body","logDisplay","require"],"mappings":";;;;;;;;+BAIA,WAA0BA,GAA1B,EAAwCC,IAAxC,EAA6E;AAC3E,QAAI,OAAOD,IAAIE,KAAJ,CAAUC,CAAjB,KAAuB,QAA3B,EAAqC;AACnC,YAAMA,IAAIH,IAAIE,KAAJ,CAAUC,CAApB;AACA,UAAIC,SAAS,EAAb;AACA,UAAI;AACFA,iBAAS,MAAMC,GAAGC,QAAH,CAAY,qBAASH,CAAT,CAAZ,CAAf;AACD,OAFD,CAEE,OAAOI,CAAP,EAAU;AACVH,iBAAU,iBAAeD,CAAE,GAA3B;AACD;AACDH,UAAIQ,IAAJ,GAAWJ,MAAX;AACD;AACF,G;;kBAXcK,U;;;;;AAHf;;;;AADA,MAAMJ,KAAKK,QAAQ,gBAAR,EAA0BL,EAArC;QAkBEI,U,GAAAA,U","file":"log.js","sourcesContent":["const fs = require('../utils/fs.js').fs;\nimport { toTmpDir, format } from '../utils/tools.js';\nimport type { Context } from 'koa';\n\nasync function logDisplay(ctx: Context, next: Promise<mixed>): Promise<void> {\n  if( typeof ctx.query.l === 'string') {\n    const l = ctx.query.l;\n    let logStr = '';\n    try {\n      logStr = await fs.readFile(toTmpDir(l));\n    } catch (e) {\n      logStr = `not log for /${l}`;\n    }\n    ctx.body = logStr;\n  }\n}\n\nexport {\n  logDisplay\n}\n"],"sourceRoot":"/home/iamchenxin/project/workout/wxts2/src"}