{"version":3,"sources":["wxlib/wxxml.js"],"names":["xml2js","require","mustNot","mustBe","pro","formatMessage","result","message","key","Array","length","val","trim","forEach","item","push","parseWxBody","wxBody","Promise","resolve","reject","wxXmlStr","toString","parseString","err","xml","wxjson"],"mappings":";;;;;;;AAEA;;AACA;;AAFA,MAAMA,SAASC,QAAQ,QAAR,CAAf;;AAGA,MAAM,EAACC,OAAD,EAAUC,MAAV,KAAoBF,QAAQ,cAAR,EAAwBG,GAAlD;AACA;;;AAGA,MAAMC,gBAAgB,UAAUC,MAAV,EAAkB;AACtC,MAAIC,UAAU,EAAd;AACA,MAAI,OAAOD,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,SAAK,IAAIE,GAAT,IAAgBF,MAAhB,EAAwB;AACtB,UAAI,EAAEA,OAAOE,GAAP,aAAuBC,KAAzB,KAAmCH,OAAOE,GAAP,EAAYE,MAAZ,KAAuB,CAA9D,EAAiE;AAC/D;AACD;AACD,UAAIJ,OAAOE,GAAP,EAAYE,MAAZ,KAAuB,CAA3B,EAA8B;AAC5B,YAAIC,MAAML,OAAOE,GAAP,EAAY,CAAZ,CAAV;AACA,YAAI,OAAOG,GAAP,KAAe,QAAnB,EAA6B;AAC3BJ,kBAAQC,GAAR,IAAeH,cAAcM,GAAd,CAAf;AACD,SAFD,MAEO;AACLJ,kBAAQC,GAAR,IAAe,CAACG,OAAO,EAAR,EAAYC,IAAZ,EAAf;AACD;AACF,OAPD,MAOO;AACLL,gBAAQC,GAAR,IAAe,EAAf;AACAF,eAAOE,GAAP,EAAYK,OAAZ,CAAoB,UAAUC,IAAV,EAAgB;AAClCP,kBAAQC,GAAR,EAAaO,IAAb,CAAkBV,cAAcS,IAAd,CAAlB;AACD,SAFD;AAGD;AACF;AACD,WAAOP,OAAP;AACD,GApBD,MAoBO;AACL,WAAOD,MAAP;AACD;AACF,CAzBD;;AA2BA,SAASU,WAAT,CAAqBC,MAArB,EAA6D;AAC3D,SAAO,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAC3C,UAAMC,WAAY,OAAOJ,MAAP,KAAkB,QAAnB,GAA8BA,MAA9B,GAAqCA,OAAOK,QAAP,CAAgB,MAAhB,CAAtD;AACA,QAAI,CAACD,QAAL,EAAe;AAAE;AACf,YAAM,sBAAgB,0BAAwB,mBAAOJ,MAAP,CAAe,GAAvD,EACN,aADM,CAAN;AAED;AACDjB,WAAOuB,WAAP,CAAmBF,QAAnB,EAA6B,EAACT,MAAM,IAAP,EAA7B,EAA2C,CAACY,GAAD,EAAMlB,MAAN,KAAiB;AAC1D,UAAIkB,OAAOlB,OAAOmB,GAAP,IAAc,IAAzB,EAA+B;AAC7B,eAAOL,OAAO,sBAAgB,aAAWI,IAAIF,QAAJ,EAAe,KAA3B,GAC5B,aAAWD,QAAS,GADP,EACU,aADV,CAAP,CAAP;AAED;AACD,YAAMK,SAASrB,cAAcC,OAAOmB,GAArB,CAAf;AACAN,cAAQO,MAAR;AACD,KAPD;AAQD,GAdM,CAAP;AAeD;;QAGCV,W,GAAAA,W","file":"wxxml.js","sourcesContent":["// @flow\nconst xml2js = require('xml2js');\nimport { WXXmlError } from '../utils/error.js';\nimport { format } from '../utils/tools.js';\nconst {mustNot, mustBe} = require('flow-dynamic').pro;\n/*!\n * 将xml2js解析出来的对象转换成直接可访问的对象\n */\nconst formatMessage = function (result) {\n  var message = {};\n  if (typeof result === 'object') {\n    for (var key in result) {\n      if (!(result[key] instanceof Array) || result[key].length === 0) {\n        continue;\n      }\n      if (result[key].length === 1) {\n        var val = result[key][0];\n        if (typeof val === 'object') {\n          message[key] = formatMessage(val);\n        } else {\n          message[key] = (val || '').trim();\n        }\n      } else {\n        message[key] = [];\n        result[key].forEach(function (item) {\n          message[key].push(formatMessage(item));\n        });\n      }\n    }\n    return message;\n  } else {\n    return result;\n  }\n};\n\nfunction parseWxBody(wxBody: string|Buffer): Promise<Object> {\n  return new Promise(function(resolve, reject) {\n    const wxXmlStr = (typeof wxBody === 'string')? wxBody:wxBody.toString('utf8');\n    if (!wxXmlStr) { // more safe than only check ''. though we have static check.\n      throw new WXXmlError(`body is wrong|empty.\\n${format(wxBody)}`,\n      'parseWxBody');\n    }\n    xml2js.parseString(wxXmlStr, {trim: true}, (err, result) => {\n      if (err || result.xml == null) {\n        return reject(new WXXmlError(`xml2js:\\n${err.toString()}\\n` +\n        `wxBody:\\n${wxXmlStr}`, 'parseWxBody'));\n      }\n      const wxjson = formatMessage(result.xml);\n      resolve(wxjson);\n    })\n  });\n}\n\nexport {\n  parseWxBody,\n}\n"],"sourceRoot":"/home/iamchenxin/project/workout/wxts2/src"}