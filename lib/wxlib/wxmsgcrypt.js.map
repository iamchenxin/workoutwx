{"version":3,"sources":["wxlib/wxmsgcrypt.js"],"names":["mustNot","mustBe","require","pro","WXBizMsgCrypt","constructor","token","encodingAESKey","corpId","prpCrypt","VerifyEchostr","wxParams","timestamp","nonce","echostr","localSignature","getSignature","msg_signature","plainMsg","decrypt","id","message","decryptMsg","wxPost"],"mappings":";;;;;;;AACA;;AAGA;;AACA;;AAFA,MAAM,EAACA,OAAD,EAAUC,MAAV,KAAoBC,QAAQ,cAAR,EAAwBC,GAAlD;;AAGA,MAAMC,aAAN,CAAoB;AAElBC,cAAYC,KAAZ,EAA2BC,cAA3B,EAAmDC,MAAnD,EAAmE;AACjE,SAAKC,QAAL,GAAgB,uBAAaH,KAAb,EAAoBC,cAApB,EAAoCC,MAApC,CAAhB;AACD;;AAED;;;;;;AAMAE,gBAAeC,QAAf,EAA4C;AAC1C,UAAM,EAACC,SAAD,EAAYC,KAAZ,EAAmBC,OAAnB,KAA8BH,QAApC;AACA,UAAMI,iBAAiB,KAAKN,QAAL,CAAcO,YAAd,CAA2BJ,SAA3B,EAAsCC,KAAtC,EAA6CC,OAA7C,CAAvB;AACAb,WAAO,IAAP,EAAac,mBAAmBJ,SAASM,aAAzC,EACA,yBAAmB;;QAAA,CAEf,mBAAON,QAAP,CAAiB;;QAAA,CAEjB,mBAAOI,cAAP,CAAuB,GAJ3B,EAI8B,eAJ9B,CADA;;AAOA;AACA;AACA,UAAMG,WAAW,KAAKT,QAAL,CAAcU,OAAd,CAAsBR,SAASG,OAA/B,CAAjB;AACAb,WAAO,IAAP,EAAaiB,SAASE,EAAT,KAAgB,KAAKX,QAAL,CAAcD,MAA3C,EAAoD,yBACjD,iDAA+C,mBAAOU,QAAP,CAAiB,GADf,EAElD,eAFkD,CAApD;AAIA,WAAOA,SAASG,OAAhB,CAjB0C,CAiBjB;AAC1B;;AAEDC,aAAYX,QAAZ,EAAgCY,MAAhC,EAA+C,CAE9C;AAlCiB;;QAsClBnB,a,GAAAA,a","file":"wxmsgcrypt.js","sourcesContent":["// @flow\nimport { Prpcrypt } from './wxcrypto.js';\nimport type {WXParams} from './wxcrypto.js';\nconst {mustNot, mustBe} = require('flow-dynamic').pro;\nimport { format } from '../utils/tools.js';\nimport { WXCrypToError } from '../utils/error.js';\nclass WXBizMsgCrypt {\n  prpCrypt: Prpcrypt;\n  constructor(token: string, encodingAESKey: string, corpId: string) {\n    this.prpCrypt = new Prpcrypt(token, encodingAESKey, corpId);\n  }\n\n  /*\n  * 验证URL\n  * If it is not a legal msg, throw error.\n  *@wxParams the get params of wechat\n  *@return plain echostr\n  */\n  VerifyEchostr( wxParams: WXParams ): string {\n    const {timestamp, nonce, echostr} = wxParams;\n    const localSignature = this.prpCrypt.getSignature(timestamp, nonce, echostr);\n    mustBe(true, localSignature === wxParams.msg_signature,\n    new WXCrypToError(`illegal msg from wechat server:\n    \\nwechat get:\n    \\n${format(wxParams)}\n    \\nlocalSignature:\n    \\n${format(localSignature)}`, 'VerifyEchostr'));\n\n    // It is a legel get, decipher the params and return echostr\n    // The echostr from wechat's get is a ciphered data.\n    const plainMsg = this.prpCrypt.decrypt(wxParams.echostr);\n    mustBe(true, plainMsg.id === this.prpCrypt.corpId , new WXCrypToError(\n      `The corpId is not equal to ours.\\nplainMsg:\\n${format(plainMsg)}`,\n      'VerifyEchostr'\n    ));\n    return plainMsg.message; // the message is deciphered echostr.\n  }\n\n  decryptMsg( wxParams: WXParams, wxPost: mixed) {\n\n  }\n}\n\nexport {\n  WXBizMsgCrypt\n}\n"],"sourceRoot":"/home/iamchenxin/project/workout/wxts2/src"}