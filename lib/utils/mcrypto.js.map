{"version":3,"sources":["utils/mcrypto.js"],"names":["crypto","require","MYS","constructor","token","cipher","createCipher","decipher","createDecipher","encrypt","str","ens","update","final","decrypt","des","ts2","console","log","getCiphers","ts3","s"],"mappings":";;AACA,MAAMA,SAASC,QAAQ,QAAR,CAAf;;;AA8BA,MAAMC,GAAN,CAAU;AAIRC,cAAYC,KAAZ,EAA2B;AACzB,SAAKA,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcL,OAAOM,YAAP,CAAoB,QAApB,EAA8BF,KAA9B,CAAd;AACA,SAAKG,QAAL,GAAiBP,OAAOQ,cAAP,CAAsB,QAAtB,EAAgCJ,KAAhC,CAAjB;AACD;AACDK,UAAQC,GAAR,EAA6B;AAC3B,QAAIC,MAAM,KAAKN,MAAL,CAAYO,MAAZ,CAAmBF,GAAnB,EAAuB,MAAvB,EAA8B,QAA9B,CAAV;AACAC,WAAO,KAAKN,MAAL,CAAYQ,KAAZ,CAAkB,QAAlB,CAAP;AACA,WAAOF,GAAP;AACD;AACDG,UAAQJ,GAAR,EAA6B;AAC3B,QAAIK,MAAM,KAAKR,QAAL,CAAcK,MAAd,CAAqBF,GAArB,EAAyB,QAAzB,EAAkC,MAAlC,CAAV;AACAK,WAAO,KAAKR,QAAL,CAAcM,KAAd,CAAoB,MAApB,CAAP;AACA,WAAOE,GAAP;AACD;AAlBO;AAoBV;;;;;;;;;;;AAWA,SAASC,GAAT,GAAe;AACbC,UAAQC,GAAR,CAAYlB,OAAOmB,UAAP,EAAZ;AACD;;AAED,SAASC,GAAT,GAAe;AACb,QAAMC,IAAI,IAAInB,GAAJ,CAAQ,QAAR,CAAV;AACA,QAAMS,MAAMU,EAAEZ,OAAF,CAAU,WAAV,CAAZ;AACAQ,UAAQC,GAAR,CAAa,cAAYP,GAAI,GAA7B;AACA,QAAMI,MAAMM,EAAEP,OAAF,CAAUH,GAAV,CAAZ;AACAM,UAAQC,GAAR,CAAa,cAAYH,GAAI,GAA7B;AACD;;AAEDK","file":"mcrypto.js","sourcesContent":["// @flow\nconst crypto = require('crypto');\ndeclare class _crypto$Decipher extends stream$Duplex {\n  final(output_encoding: 'latin1' | 'ascii' | 'utf8'): string,\n  final(output_encoding: void): Buffer,\n  getAuthTag(): Buffer,\n  setAAD(buffer: Buffer): void,\n  setAuthTag(buffer: Buffer): void,\n  setAutoPadding(auto_padding?: boolean): crypto$Cipher,\n  update(\n    data: string,\n    input_encoding: 'latin1'| 'base64' | 'hex',\n    output_encoding: 'latin1' | 'ascii' | 'utf8',\n  ): string;\n  update(\n    data: string,\n    input_encoding: 'latin1'| 'base64' | 'hex',\n    output_encoding: void\n  ): Buffer;\n  update(\n    data: Buffer,\n    input_encoding: void,\n    output_encoding: 'latin1' | 'ascii' | 'utf8',\n  ): string;\n  update(\n    data: Buffer,\n    input_encoding: void,\n    output_encoding: void\n  ): Buffer;\n}\n\nclass MYS {\n  token: string;\n  cipher: crypto$Cipher;\n  decipher: _crypto$Decipher;\n  constructor(token: string) {\n    this.token = token;\n    this.cipher = crypto.createCipher('aes256', token);\n    this.decipher = (crypto.createDecipher('aes256', token):any);\n  }\n  encrypt(str: string): string {\n    let ens = this.cipher.update(str,'utf8','base64');\n    ens += this.cipher.final('base64');\n    return ens;\n  }\n  decrypt(str: string): string {\n    let des = this.decipher.update(str,'base64','utf8');\n    des += this.decipher.final('utf8');\n    return des;\n  }\n}\n/*\nfunction ts() { // this is wrong!\n  const s = new MYS('135fgh');\n  const ens = s.encrypt.update('你好啊,我是刘的哈','utf8','base64');\n  ens += cipher.final('hex');\n  console.log(`encrypt = ${ens}`);\n  const des = s.decrypt.update(ens,'base64','utf8');\n  console.log(`decrypt = ${des}`);\n}\n*/\n\nfunction ts2() {\n  console.log(crypto.getCiphers());\n}\n\nfunction ts3() {\n  const s = new MYS('123ghd');\n  const ens = s.encrypt('你好啊,我是刘的哈');\n  console.log(`encrypt = ${ens}`);\n  const des = s.decrypt(ens);\n  console.log(`decrypt = ${des}`);\n}\n\nts3();\n"],"sourceRoot":"/home/iamchenxin/project/workout/wxts2/src"}